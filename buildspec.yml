version: 0.2

env:
  variables:
    AWS_REGION: "ap-south-1"
    ECR_FRONTEND: "970547333335.dkr.ecr.ap-south-1.amazonaws.com/frontend"
    ECR_BACKEND: "970547333335.dkr.ecr.ap-south-1.amazonaws.com/backend"
    KUBERNETES_DEPLOYMENT_FRONTEND: "frontend"
    KUBERNETES_DEPLOYMENT_BACKEND: "backend"
    KUBERNETES_NAMESPACE: "default"
    CLUSTER_NAME: "notes-app"

phases:
  install:
    commands:
      - echo "Installing AWS CLI and Kubectl..."
      - apt-get update && apt-get install -y awscli
      - curl -o kubectl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip
      - chmod +x kubectl && mv kubectl /usr/local/bin/

  pre_build:
    commands:
      - echo "Logging into Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_FRONTEND
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_BACKEND

  build:
    commands:
      - echo "Building frontend Docker image..."
      - docker build -t $ECR_FRONTEND:latest frontend/
      - docker tag $ECR_FRONTEND:latest $ECR_FRONTEND:$CODEBUILD_RESOLVED_SOURCE_VERSION

      - echo "Building backend Docker image..."
      - docker build -t $ECR_BACKEND:latest backend/
      - docker tag $ECR_BACKEND:latest $ECR_BACKEND:$CODEBUILD_RESOLVED_SOURCE_VERSION

  post_build:
    commands:
      - echo "Pushing frontend image to ECR..."
      - docker push $ECR_FRONTEND:latest
      - docker push $ECR_FRONTEND:$CODEBUILD_RESOLVED_SOURCE_VERSION

      - echo "Pushing backend image to ECR..."
      - docker push $ECR_BACKEND:latest
      - docker push $ECR_BACKEND:$CODEBUILD_RESOLVED_SOURCE_VERSION

      - echo "Updating Kubeconfig for EKS..."
      - aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - echo "Deploying new images to EKS..."
      - kubectl set image deployment/$KUBERNETES_DEPLOYMENT_FRONTEND frontend=$ECR_FRONTEND:$CODEBUILD_RESOLVED_SOURCE_VERSION -n $KUBERNETES_NAMESPACE
      - kubectl set image deployment/$KUBERNETES_DEPLOYMENT_BACKEND backend=$ECR_BACKEND:$CODEBUILD_RESOLVED_SOURCE_VERSION -n $KUBERNETES_NAMESPACE

      - echo "Waiting for deployment to complete..."
      - kubectl rollout status deployment/$KUBERNETES_DEPLOYMENT_FRONTEND -n $KUBERNETES_NAMESPACE
      - kubectl rollout status deployment/$KUBERNETES_DEPLOYMENT_BACKEND -n $KUBERNETES_NAMESPACE

      - echo "Verifying deployment..."
      - if kubectl get pods -n $KUBERNETES_NAMESPACE | grep -q 'CrashLoopBackOff\|Error\|ImagePullBackOff'; then
          echo "Deployment failed, rolling back...";
          kubectl rollout undo deployment/$KUBERNETES_DEPLOYMENT_FRONTEND -n $KUBERNETES_NAMESPACE;
          kubectl rollout undo deployment/$KUBERNETES_DEPLOYMENT_BACKEND -n $KUBERNETES_NAMESPACE;
        else
          echo "Deployment successful!";
        fi
